function hNRSchedulingTDDValidateConfig(simParameters) %#codegen
%hNRSchedulingTDDValidateConfig Validate the simulation configuration parameters
%
%   This is a helper function for an example
%
%   hNRSchedulingTDDValidateConfig(SIMPARAMETERS) Validate the simulation configuration parameters
%
%   SIMPARAMETERS is a structure with following fields:
%   NumFramesSim               - Number of 10 ms frames to simulate
%   NumUEs                     - Number of UEs in the cell
%   ULPacketPeriodicityUEs     - Periodicity of application data on UEs for uplink direction (in ms)
%   ULPacketSizesUEs           - Size of the packet generated by UEs in the logical channel (in bytes)
%   DLPacketPeriodicityUEs     - Periodicity of application data on UEs for uplink direction (in ms)
%   DLPacketSizesUEs           - Size of the packet generated for UEs in the logical channel (in bytes)
%   SchedulerStrategy          - Scheduler strategy
%   RBGSizeConfig              - (Optional field) RBG size configuration (for
%                                defining number of RBs in one RBG) to 1
%                                (configuration-1 RBG table) or 2
%                                (configuration-2 RBG table) as defined in
%                                3GPP TS 38.214 Section 5.1.2.2.1
%   NumMetricsSteps            - Number of times metrics plots get updated in
%                                the simulation

%   Copyright 2019-2020 The MathWorks, Inc.

%#codegen

% Number of slots in a frame
numSlotsFrame = 10 *(simParameters.SCS / 15);
% Number of slots in the simulation
numSlotsSim = simParameters.NumFramesSim * numSlotsFrame;

% Validate the simulation time
validateattributes(simParameters.NumFramesSim, {'numeric'}, {'nonempty', 'integer', 'scalar', 'finite', '>=', 0}, 'simParameters.NumFramesSim', 'NumFramesSim');

% Validate the number of UEs
validateattributes(simParameters.NumUEs, {'numeric'}, {'nonempty', 'integer', 'scalar', '>', 0, '<=', 65519}, 'simParameters.NumUEs', 'NumUEs');

% Validate the distance of UEs from the gNB
validateattributes(simParameters.UEDistance, {'numeric'}, {'nonempty', 'vector', 'finite', 'numel', simParameters.NumUEs, '>', 0}, 'simParameters.UEDistance', 'UEDistance');

% Validate the UL traffic periodicity
validateattributes(simParameters.ULPacketPeriodicityUEs, {'numeric'}, {'nonempty', 'integer', 'vector', 'numel', simParameters.NumUEs, 'finite', '>', 0}, 'simParameters.ULPacketPeriodicityUEs', 'ULPacketPeriodicityUEs');
% Validate the size of UL packet generated by UEs
validateattributes(simParameters.ULPacketSizesUEs, {'numeric'}, {'nonempty', 'integer', 'nrows', simParameters.NumUEs, 'finite', '>=', 0}, 'simParameters.ULPacketSizesUEs', 'ULPacketSizesUEs');

% Validate the DL traffic periodicity
validateattributes(simParameters.DLPacketPeriodicityUEs, {'numeric'}, {'nonempty', 'integer', 'vector', 'numel', simParameters.NumUEs, 'finite', '>', 0}, 'simParameters.DLPacketPeriodicityUEs', 'DLPacketPeriodicityUEs');
% Validate the size of DL packet generated by gNBs for UEs
validateattributes(simParameters.DLPacketSizesUEs, {'numeric'}, {'nonempty', 'integer', 'nrows', simParameters.NumUEs, 'finite', '>=', 0}, 'simParameters.DLPacketSizesUEs', 'DLPacketSizesUEs');

% Validate the scheduler strategy
validateattributes(simParameters.SchedulerStrategy, {'char'}, {'nonempty', 'vector'}, 'simParameters.SchedulerStrategy', 'SchedulerStrategy');

% Validate RBG size config
if isfield(simParameters, 'RBGSizeConfig')
    validateattributes(simParameters.RBGSizeConfig, {'numeric'}, {'nonempty', 'scalar', 'integer', '>=', 1, '<=', 2}, 'simParameters.RBGSizeConfig', 'RBGSizeConfig');
end

% Validate the metric plot step-count. Number of steps must be less than or equal to number of slots in simulation
validateattributes(simParameters.NumMetricsSteps, {'numeric'}, {'nonempty', 'integer', 'finite', 'scalar', '>', 0, '<=', numSlotsSim}, 'simParameters.NumMetricsSteps', 'NumMetricsSteps');
end